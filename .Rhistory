sample_size <- 1000
true_disease_status <- rbinom(sample_size, 1, true_prevalence)
test_result <- rbinom(sample_size, 1, ifelse(true_disease_status == 1, test_sensitivity, 1 - test_specificity)))
library(MCMCpack)
# Generate example data
# Assume 1000 individuals with a binary test result and no gold standard
set.seed(123)
true_prevalence <- 0.2
test_sensitivity <- 0.8
test_specificity <- 0.9
sample_size <- 1000
true_disease_status <- rbinom(sample_size, 1, true_prevalence)
test_result <- rbinom(sample_size, 1, ifelse(true_disease_status == 1, test_sensitivity, 1 - test_specificity)))
test_result <-
rbinom(sample_size, 1, ifelse(true_disease_status == 1, test_sensitivity, 1 - test_specificity))
# Define likelihood function
likelihood <- function(p, sens, spec) {
log_lik <- sum(dbinom(test_result, 1, ifelse(true_disease_status == 1, sens, 1 - spec), log = TRUE))
log_lik + dbeta(p, 1, 1, log = TRUE)
}
# Define prior distributions for parameters
prior <- function(p, sens, spec) {
dnorm(p, mean = 0.2, sd = 0.05, log = TRUE) +
dunif(sens, 0.5, 1, log = TRUE) +
dunif(spec, 0.5, 1, log = TRUE)
}
# Specify the number of iterations for the MCMC algorithm
n_iterations <- 5000
# Run the MCMC algorithm
mcmc_output <- MCMCmetrop1R(likelihood, prior, thin = 10, n.iter = n_iterations,
p = 0.2, sens = 0.8, spec = 0.9)
MCMCmetrop1R(likelihood, prior, thin = 10, n.iter = n_iterations,
p = 0.2, sens = 0.8, spec = 0.9)
# Run the MCMC algorithm
mcmc_output <-
MCMCmetrop1R(likelihood, prior, thin = 10, n.iter = n_iterations,
p = 0.2, sens = 0.8, spec = 0.9)
library(future)
plan(strategy = c(multiprocess, multisession)[2])
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(dtupdate)
github_update(
auto.install = c(FALSE, TRUE)[2]
, ask          = c(FALSE, TRUE)[1]
, widget       = c(FALSE, TRUE)[1]
, dependencies = c(FALSE, TRUE)[2]
, libpath      = .libPaths()[1]
)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(purrr)
library(pkgdepends)
library(stringr)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package, InstalledVersion = Version) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package, CRANVersion = Version) |>
roworder(Package)
dt2
githubPackages <-
github_update(auto.install = FALSE) %>%
qDT() %>%
frename(package = Package)
dt12 <-
reduce(
.x = list(dt1, dt2, githubPackages)
, .f = left_join.
, by = "Package"
) %>%
fselect(Package, InstalledVersion, CRANVersion, gh_version = 6) %>%
qDT() %>%
fsubset(is.na(gh_version)) %>%
# fsubset(InstalledVersion != CRANVersion) %>%
fmutate(
InstalledVersion = as.numeric(str_remove_all(string = InstalledVersion, pattern = "(?<=\\..{0,10})\\.|-"))
, CRANVersion      = as.numeric(str_remove_all(string = CRANVersion, pattern = "(?<=\\..{0,10})\\.|-"))
) %>%
fsubset(InstalledVersion < CRANVersion) %>%
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %notin% c("USP")) |>
pull(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[1]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
pkg_install(
pkg          = dt12 |>
fsubset(Package %notin% c("USP")) |>
pull(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[1]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
library(MCMCpack)
# Generate example data
# Assume 1000 individuals with a binary test result and no gold standard
set.seed(123)
true_prevalence <- 0.2
test_sensitivity <- 0.8
test_specificity <- 0.9
sample_size <- 1000
true_disease_status <- rbinom(sample_size, 1, true_prevalence)
test_result <-
rbinom(sample_size, 1, ifelse(true_disease_status == 1, test_sensitivity, 1 - test_specificity))
# Define likelihood function
likelihood <- function(p, sens, spec) {
log_lik <- sum(dbinom(test_result, 1, ifelse(true_disease_status == 1, sens, 1 - spec), log = TRUE))
log_lik + dbeta(p, 1, 1, log = TRUE)
}
# Define prior distributions for parameters
prior <- function(p, sens, spec) {
dnorm(p, mean = 0.2, sd = 0.05, log = TRUE) +
dunif(sens, 0.5, 1, log = TRUE) +
dunif(spec, 0.5, 1, log = TRUE)
}
# Specify the number of iterations for the MCMC algorithm
n_iterations <- 5000
# Run the MCMC algorithm
mcmc_output <-
MCMCmetrop1R(likelihood, prior, thin = 10, n.iter = n_iterations,
p = 0.2, sens = 0.8, spec = 0.9)
pop <- matrix(c(166, 20, 96, 89, 134, 271, 1166, 13895), 1, 8)
ns <- apply(pop, 1, sum)
dd<-list(n = ns, pop = pop)
modelData <- dump.format(dd)
library(runjags)
library(pak)
pkg_install("runjags")
library(runjags)
pop <- matrix(c(166, 20, 96, 89, 134, 271, 1166, 13895), 1, 8)
ns <- apply(pop, 1, sum)
dd<-list(n = ns, pop = pop)
modelData <- dump.format(dd)
modelInit1 <- dump.format(list(Sefat1=0.5, Sefat2=0.6, SeVI=0.7, Spfat1=0.95, Spfat2=0.97, SpVI=0.99, pi=runif(length(ns), 0.1, 0.3)))
modelInit2 <- dump.format(list(Sefat1=0.4, Sefat2=0.5, SeVI=0.6, Spfat1=0.93, Spfat2=0.96, SpVI=0.94, pi=runif(length(ns), 0.1, 0.3)))
modelInit3 <- dump.format(list(Sefat1=0.7, Sefat2=0.7, SeVI=0.5, Spfat1=0.90, Spfat2=0.98, SpVI=0.98, pi=runif(length(ns), 0.1, 0.3)))
modelInits <- c(modelInit1, modelInit2,  modelInit3)
modelString <- "
model{
pop[1, 1:8] ~ dmulti(par[1, 1:8], n)
par[1,1] <- pi*SeVI*(Sefat1*Sefat2+covDp) + (1-pi)*(1-SpVI)*((1-Spfat1)*(1-Spfat2)+covDn)
par[1,2] <- pi*SeVI*(Sefat1*(1-Sefat2)-covDp) + (1-pi)*(1-SpVI)*((1-Spfat1)*Spfat2-covDn)
par[1,3] <- pi*(1-SeVI)*(Sefat1*Sefat2+covDp) + (1-pi)*SpVI*((1-Spfat1)*(1-Spfat2)+covDn)
par[1,4] <- pi*(1-SeVI)*(Sefat1*(1-Sefat2)-covDp) + (1-pi)*SpVI*((1-Spfat1)*Spfat2-covDn)
par[1,5] <- pi*SeVI*((1-Sefat1)*Sefat2-covDp) + (1-pi)*(1-SpVI)*(Spfat1*(1-Spfat2)-covDn)
par[1,6] <- pi*SeVI*((1-Sefat1)*(1-Sefat2)+covDp) + (1-pi)*(1-SpVI)*(Spfat1*Spfat2+covDn)
par[1,7] <- pi*(1-SeVI)*((1-Sefat1)*Sefat2-covDp) + (1-pi)*SpVI*(Spfat1*(1-Spfat2)-covDn)
par[1,8] <- pi*(1-SeVI)*((1-Sefat1)*(1-Sefat2)+covDp) + (1-pi)*SpVI*(Spfat1*Spfat2+covDn)
ls <- (Sefat1-1)*(1-Sefat2)
us <- min(Sefat1,Sefat2) - Sefat1*Sefat2
lc <- (Spfat1-1)*(1-Spfat2)
uc <- min(Spfat1,Spfat2) - Spfat1*Spfat2
rhoD <- covDp / sqrt(Sefat1*(1-Sefat1)*Sefat2*(1-Sefat2))
rhoDc <- covDn / sqrt(Spfat1*(1-Spfat1)*Spfat2*(1-Spfat2))
pi ~ dunif(0, 0.3)
Sefat1 ~ dbeta(1,1)
Spfat1 ~ dbeta(1545, 17)
Sefat2 ~ dbeta(1, 1)
Spfat2 ~ dbeta(1496, 66)
SeVI ~ dbeta(1, 1)
SpVI ~ dbeta(1, 1)
# covDn ~ dunif(lc, uc)
# covDp ~ dunif(ls, us)
covDn <- 0
covDp <- 0
}
"
print(system.time(
x <- run.jags(	model = modelString,
monitor = c("Sefat1", "Sefat2", "SeVI", "Spfat1", "Spfat2",  "SpVI", "rhoD", "rhoDc", "pi"),
data = modelData,
burnin = 20000,
sample = 30000,
thin = 10,
n.chains=3,
inits = modelInits
)
))
pkg_install("rjags")
library(rjags)
library(bmeta)
pkg_install("bmeta")
pkg_install("giabaio/bmeta")
library(future)
plan(strategy = c(multiprocess, multisession)[2])
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(dtupdate)
github_update(
auto.install = c(FALSE, TRUE)[2]
, ask          = c(FALSE, TRUE)[1]
, widget       = c(FALSE, TRUE)[1]
, dependencies = c(FALSE, TRUE)[2]
, libpath      = .libPaths()[1]
)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(purrr)
library(pkgdepends)
library(stringr)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package, InstalledVersion = Version) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package, CRANVersion = Version) |>
roworder(Package)
dt2
githubPackages <-
github_update(auto.install = FALSE) %>%
qDT() %>%
frename(package = Package)
dt12 <-
reduce(
.x = list(dt1, dt2, githubPackages)
, .f = left_join.
, by = "Package"
) %>%
fselect(Package, InstalledVersion, CRANVersion, gh_version = 6) %>%
qDT() %>%
fsubset(is.na(gh_version)) %>%
# fsubset(InstalledVersion != CRANVersion) %>%
fmutate(
InstalledVersion = as.numeric(str_remove_all(string = InstalledVersion, pattern = "(?<=\\..{0,10})\\.|-"))
, CRANVersion      = as.numeric(str_remove_all(string = CRANVersion, pattern = "(?<=\\..{0,10})\\.|-"))
) %>%
fsubset(InstalledVersion < CRANVersion) %>%
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %notin% c("USP")) |>
pull(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[1]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
library(quarto)
quarto_version()
quarto_version()
library(quarto)
quarto_version()
3200+750*4
3200+700*4
3000+700*4
library(pdftools)
pdf_convert(
pdf       = "Gmail - Greetings.pdf"
, format    = "png"
, pages     = NULL
, filenames = NULL
, dpi       = 300
)
library(pdftools)
pdf_convert(
pdf       = "Gmail - Greetings.pdf"
, format    = "png"
, pages     = NULL
, filenames = NULL
, dpi       = 300
)
597/1226
library(future)
plan(strategy = c(sequential, multisession, multicore, cluster)[2])
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(dtupdate)
github_update(
auto.install = c(FALSE, TRUE)[2]
, ask          = c(FALSE, TRUE)[1]
, widget       = c(FALSE, TRUE)[1]
, dependencies = c(FALSE, TRUE)[2]
, libpath      = .libPaths()[1]
)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(purrr)
library(pkgdepends)
library(stringr)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package, InstalledVersion = Version) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package, CRANVersion = Version) |>
roworder(Package)
dt2
githubPackages <-
github_update(auto.install = FALSE) %>%
qDT() %>%
frename(package = Package)
dt12 <-
reduce(
.x = list(dt1, dt2, githubPackages)
, .f = left_join.
, by = "Package"
) %>%
fselect(Package, InstalledVersion, CRANVersion, gh_version = 6) %>%
qDT() %>%
fsubset(is.na(gh_version)) %>%
# fsubset(InstalledVersion != CRANVersion) %>%
fmutate(
InstalledVersion = as.numeric(str_remove_all(string = InstalledVersion, pattern = "(?<=\\..{0,10})\\.|-"))
, CRANVersion      = as.numeric(str_remove_all(string = CRANVersion, pattern = "(?<=\\..{0,10})\\.|-"))
) %>%
fsubset(InstalledVersion < CRANVersion) %>%
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %notin% c("MASS", "USP")) |>
pull(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[1]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
library(future)
plan(strategy = c(sequential, multisession, multicore, cluster)[2])
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(dtupdate)
github_update(
auto.install = c(FALSE, TRUE)[2]
, ask          = c(FALSE, TRUE)[1]
, widget       = c(FALSE, TRUE)[1]
, dependencies = c(FALSE, TRUE)[2]
, libpath      = .libPaths()[1]
)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(purrr)
library(pkgdepends)
library(stringr)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package, InstalledVersion = Version) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package, CRANVersion = Version) |>
roworder(Package)
dt2
githubPackages <-
github_update(auto.install = FALSE) %>%
qDT() %>%
frename(package = Package)
dt12 <-
reduce(
.x = list(dt1, dt2, githubPackages)
, .f = left_join.
, by = "Package"
) %>%
fselect(Package, InstalledVersion, CRANVersion, gh_version = 6) %>%
qDT() %>%
fsubset(is.na(gh_version)) %>%
# fsubset(InstalledVersion != CRANVersion) %>%
fmutate(
InstalledVersion = as.numeric(str_remove_all(string = InstalledVersion, pattern = "(?<=\\..{0,10})\\.|-"))
, CRANVersion      = as.numeric(str_remove_all(string = CRANVersion, pattern = "(?<=\\..{0,10})\\.|-"))
) %>%
fsubset(InstalledVersion < CRANVersion) %>%
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %notin% c("MASS", "USP")) |>
pull(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[1]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package, InstalledVersion = Version) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package, CRANVersion = Version) |>
roworder(Package)
dt2
githubPackages <-
github_update(auto.install = FALSE) %>%
qDT() %>%
frename(package = Package)
dt12 <-
reduce(
.x = list(dt1, dt2, githubPackages)
, .f = left_join.
, by = "Package"
) %>%
fselect(Package, InstalledVersion, CRANVersion, gh_version = 6) %>%
qDT() %>%
fsubset(is.na(gh_version)) %>%
# fsubset(InstalledVersion != CRANVersion) %>%
fmutate(
InstalledVersion = as.numeric(str_remove_all(string = InstalledVersion, pattern = "(?<=\\..{0,10})\\.|-"))
, CRANVersion      = as.numeric(str_remove_all(string = CRANVersion, pattern = "(?<=\\..{0,10})\\.|-"))
) %>%
fsubset(InstalledVersion < CRANVersion) %>%
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %notin% c("MASS", "USP")) |>
pull(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[1]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
rm(list = ls())
setwd("D:/MYaseen208_B0-22-7A-E9-23-9B/Consultancy/Mr._M._Yaseen/2017-09-14RPackages/eda4treeR/eda4treeR")
getwd()
rm(list = ls())
setwd("D:/MYaseen208_B0-22-7A-E9-23-9B/Consultancy/Mr._M._Yaseen/2017-09-14RPackages/eda4treeR/eda4treeR")
getwd()
library(devtools)
devtools::load_all()
# usethis::use_testthat()
devtools::document(roclets=c('rd', 'collate', 'namespace', 'vignette'))
devtools::install(quick = TRUE, build_vignettes = TRUE)
library(eda4treeR)
?Exam2.2
names(DataExam4.4)
names(DataExam4.4) %>% dput()
DataExam4.4 <-
DataExam4.4 %>%
setNames(c("repl", "irrig", "fert", "seedlot", "height"))
save(DataExam4.4, file = "./data/DataExam4.4.RData")
rm(list = ls())
setwd("D:/MYaseen208_B0-22-7A-E9-23-9B/Consultancy/Mr._M._Yaseen/2017-09-14RPackages/eda4treeR/eda4treeR")
getwd()
library(devtools)
devtools::load_all()
# usethis::use_testthat()
devtools::document(roclets=c('rd', 'collate', 'namespace', 'vignette'))
devtools::install(quick = TRUE, build_vignettes = TRUE)
?Exam4.4
rm(list = ls())
setwd("D:/MYaseen208_B0-22-7A-E9-23-9B/Consultancy/Mr._M._Yaseen/2017-09-14RPackages/eda4treeR/eda4treeR")
getwd()
library(devtools)
devtools::load_all()
# usethis::use_testthat()
devtools::document(roclets=c('rd', 'collate', 'namespace', 'vignette'))
devtools::install(quick = TRUE, build_vignettes = TRUE)
library(eda4treeR)
?Exam4.4
rm(list = ls())
setwd("D:/MYaseen208_B0-22-7A-E9-23-9B/Consultancy/Mr._M._Yaseen/2017-09-14RPackages/eda4treeR/eda4treeR")
getwd()
library(devtools)
devtools::load_all()
# usethis::use_testthat()
devtools::document(roclets=c('rd', 'collate', 'namespace', 'vignette'))
devtools::install(quick = TRUE, build_vignettes = TRUE)
library(eda4treeR)
?Exam4.4
demo(Exam4.4)
